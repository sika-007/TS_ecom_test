{% comment %}
  Featured Products (Recommendations) — Vanilla JS
  - Uses Product Recommendations API via routes.product_recommendations_url
  - Falls back to products selected in section blocks if no recommendations
  - Slider auto-enables if > 4 products
  - Square images, sale badge with % off, 1-line description clamp
{% endcomment %}

{{ 'ts-featured-products.css' | asset_url | stylesheet_tag }}

<section id="fp-{{ section.id }}" class="fp fp--{{ section.id }}" data-section-id="{{ section.id }}">
  <div class="fp__inner">
    <div class="fp__text_wrapper">
      {% if section.settings.heading != blank %}
        <h2 class="fp__heading">{{ section.settings.heading | escape }}</h2>
      {% endif %}

      {% if section.settings.subheading != blank %}
        <p class="fp__subheading">{{ section.settings.subheading | escape }}</p>
      {% endif %}
    </div>

    {%- assign limit = section.settings.limit | default: 8 -%}

    {%- comment -%} Visible mount point {%- endcomment -%}
    {%- if product and product.id -%}
      <div
        id="fp-container-{{ section.id }}"
        class="fp__container"
        data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit={{ limit }}{% if request.preview_theme_id %}&preview_theme_id={{ request.preview_theme_id }}{% endif %}{% if section.settings.intent %}&intent={{ section.settings.intent }}{% endif %}"
        aria-live="polite"
      >
        <div class="fp__cards" id="fp-cards-{{ section.id }}" data-count="0">
          <div class="fp__empty">Loading your recommendations…</div>
        </div>
      </div>
    {%- else -%}
      <!-- If added outside product template, render fallback immediately -->
      <div class="fp__container">
        <div class="fp__cards" id="fp-cards-{{ section.id }}" data-count="0">
          {%- assign added = 0 -%}
          {%- if section.blocks.size > 0 -%}
            {%- for block in section.blocks -%}
              {%- if block.type == 'product' and block.settings.product != blank -%}
                {%- assign p = block.settings.product -%}
                {%- comment %} Skip if this is the same product as the current page {%- endcomment %}
                {%- if product and product.id and p and p.id and product.id == p.id -%}{% continue %}{%- endif -%}
                {%- assign price = p.price_min -%}
                {%- assign compare = p.compare_at_price_max -%}
                {%- if compare > price -%}
                  {%- assign pct = compare | minus: price | times: 100.0 | divided_by: compare | round -%}
                {%- endif -%}
                <article class="fp__card">
                  <a class="fp__link" href="{{ p.url }}" aria-label="{{ p.title | escape }}">
                    <div class="fp__media">
                      {%- assign save = compare | minus: price -%}
                      {%- if compare > price and save > 0 -%}
                        <span class="fp__badge fp__badge--save">Save {{ save | money }}</span>
                      {%- endif -%}

                      {%- if p.featured_image -%}
                        <img
                          class="fp__img"
                          src="{{ p.featured_image | image_url: width: 600, height: 600, crop: 'center' }}"
                          alt="{{ p.featured_image.alt | default: p.title | escape }}"
                          width="600"
                          height="600"
                          loading="lazy"
                        >
                      {%- else -%}
                        <div class="fp__img" role="img" aria-label="{{ p.title | escape }}"></div>
                      {%- endif -%}
                    </div>

                    {%- assign rating_val = p.metafields.reviews.rating.value | default: 4.9 -%}
                    {%- if rating_val != blank -%}
                      <div class="fp__rating" aria-label="Rating {{ rating_val | round: 1 }} out of 5">
                        <span class="fp__stars" aria-hidden="true">★★★★★</span>
                        <span class="fp__rating-val">{{ rating_val | round: 1 }}</span>
                      </div>
                    {%- endif -%}

                    <h3 class="fp__title">{{ p.title | escape }}</h3>

                    {%- if p.description != blank -%}
                      <p class="fp__desc">{{ p.description | strip_html }}</p>
                    {%- endif -%}
                  </a>

                  <div class="fp__push" aria-hidden="true"></div>

                  <div class="fp__price">
                    {%- if compare > price -%}
                      <span class="fp__price-compare">{{ compare | money }}</span>
                    {%- endif -%}
                    <span class="fp__price-current">{{ price | money }}</span>
                  </div>
                </article>

                {%- assign added = added | plus: 1 -%}
                {%- if added >= limit -%}{% break %}{%- endif -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          {%- if added == 0 -%}
            <div class="fp__empty">No products to show.</div>
          {%- endif -%}
        </div>
      </div>
    {%- endif -%}

    {%- comment -%}
      Show arrows immediately only when we're in the fallback (non-product) render
      AND there are at least 5 items. On product pages we can't know yet (API),
      so keep hidden and let JS unhide if count > 4.
    {%- endcomment -%}
    {%- assign show_nav = false -%}
    {%- if product and product.id -%}
      {%- assign show_nav = false -%}
    {%- else -%}
      {%- if added and added >= 5 -%}
        {%- assign show_nav = true -%}
      {%- endif -%}
    {%- endif -%}

    <div
      class="fp__nav"
      {% unless show_nav %}
        hidden
      {% endunless %}
    >
      <button class="fp__btn fp__btn--prev" type="button" aria-label="Previous products" disabled>‹</button>
      <button class="fp__btn fp__btn--next" type="button" aria-label="Next products">›</button>
    </div>
  </div>

  <script>
    (function () {
      const root = document.getElementById('fp-{{ section.id }}');
      if (!root) return;

      const SEC = '{{ section.id }}';

      // Touch hint (kept)
      const isCoarse = window.matchMedia('(pointer: coarse)').matches || 'ontouchstart' in window;
      if (isCoarse) root.classList.add('is-touch');

      const container = root.querySelector('#fp-container-{{ section.id }}');
      const nav = root.querySelector('.fp__nav');
      const prevBtn = root.querySelector('.fp__btn--prev');
      const nextBtn = root.querySelector('.fp__btn--next');

      // -------- helpers (logging + slider) --------

      function summarizeProducts(containerEl) {
        if (!containerEl) return [];
        const cards = containerEl.querySelectorAll('.fp__card');
        return Array.from(cards).map((card, idx) => {
          const a = card.querySelector('a.fp__link');
          const hrefAttr = a?.getAttribute('href') || '';
          const handleMatch = hrefAttr.match(/\/products\/([^\/\?#]+)/);
          return {
            idx,
            id: card.getAttribute('data-product-id') || null,
            origin: card.getAttribute('data-origin') || null, // "recommendation" | "fallback" | null
            handle: handleMatch ? handleMatch[1] : '',
            title: card.querySelector('.fp__title')?.textContent.trim() || '',
            url: hrefAttr,
            price: card.querySelector('.fp__price-current')?.textContent.trim() || '',
            compare_at: card.querySelector('.fp__price-compare')?.textContent.trim() || null,
            rating: card.querySelector('.fp__rating-val')?.textContent.trim() || null,
          };
        });
      }

      function logSourceHeader(srcType, recCount, productsLength) {
        // srcType: "recommendations" | "fallback" | undefined
        if (srcType === 'recommendations') {
          console.info(`[FP][${SEC}] SOURCE: Product Recommendations API → ${recCount ?? productsLength} items`);
        } else if (srcType === 'fallback') {
          console.info(`[FP][${SEC}] SOURCE: FALLBACK products (no recommendations returned by API)`);
        } else {
          console.info(`[FP][${SEC}] SOURCE: unknown (tip: add data-source on #fp-cards-src-{{ section.id }})`);
        }
      }

      function logProductsTable(label, products) {
        console.groupCollapsed(`[FP][${SEC}] ${label} (${products.length})`);
        try {
          console.table(products);
        } catch {
          console.log(products);
        }
        console.groupEnd();

        // quick duplicate signal by product id/handle
        const ids = products.map((p) => p.id).filter(Boolean);
        const handles = products.map((p) => p.handle).filter(Boolean);
        const dup = (arr) => {
          const seen = new Set(),
            d = new Set();
          arr.forEach((x) => (seen.has(x) ? d.add(x) : seen.add(x)));
          return Array.from(d);
        };
        const dupIds = dup(ids);
        const dupHandles = dup(handles);
        if (dupIds.length || dupHandles.length) {
          console.warn(`[FP][${SEC}] Duplicates detected`, { dupIds, dupHandles });
        }
      }

      function logInsertedBreakdown(liveEl) {
        const total = liveEl.querySelectorAll('.fp__card').length;
        const recs = liveEl.querySelectorAll('.fp__card[data-origin="recommendation"]').length;
        const falls = liveEl.querySelectorAll('.fp__card[data-origin="fallback"]').length;
        console.info(`[FP][${SEC}] Inserted into DOM → total=${total} (recommendations=${recs}, fallback=${falls})`);
      }

      function setupSlider(cardsEl) {
        const items = cardsEl.querySelectorAll('.fp__card');
        const count = items.length;
        cardsEl.setAttribute('data-count', String(count));
        const shouldSlide = count > 4;

        console.info(`[FP][${SEC}] setupSlider: items=${count} → slider ${shouldSlide ? 'ENABLED' : 'disabled'}`);

        if (!shouldSlide) {
          nav.hidden = true;
          return;
        }
        cardsEl.setAttribute('data-slider', 'true');

        if (!cardsEl.querySelector('.fp__viewport')) {
          const viewport = document.createElement('div');
          viewport.className = 'fp__viewport';
          const track = document.createElement('div');
          track.className = 'fp__track';
          Array.from(items).forEach((card) => track.appendChild(card));
          viewport.appendChild(track);
          cardsEl.appendChild(viewport);
        }

        const viewport = cardsEl.querySelector('.fp__viewport');

        nav.hidden = false;

        function updateArrows() {
          const maxScroll = viewport.scrollWidth - viewport.clientWidth;
          prevBtn.disabled = viewport.scrollLeft <= 0;
          nextBtn.disabled = viewport.scrollLeft >= maxScroll - 1;
        }
        function stepSize() {
          return viewport.clientWidth;
        }

        prevBtn.onclick = () => viewport.scrollBy({ left: -stepSize(), behavior: 'smooth' });
        nextBtn.onclick = () => viewport.scrollBy({ left: stepSize(), behavior: 'smooth' });
        viewport.addEventListener('scroll', updateArrows, { passive: true });
        window.addEventListener('resize', updateArrows);
        queueMicrotask(updateArrows);
      }

      // -------- hydrate (logs sources) --------

      function hydrateCardsFromHTML(htmlText) {
        console.time(`[FP][${SEC}] hydrate`);
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlText, 'text/html');

        const incoming =
          doc.getElementById('fp-cards-src-{{ section.id }}') ||
          doc.querySelector('[data-fp-source="true"]') ||
          doc.querySelector('.fp__cards') ||
          doc.body;

        const current = document.getElementById('fp-cards-{{ section.id }}');

        if (!incoming || !current) {
          console.warn('[FP] Could not locate incoming/current cards container.', {
            incomingFound: !!incoming,
            currentFound: !!current,
            html: htmlText.slice(0, 400) + '…',
          });
          if (current) current.innerHTML = '<div class="fp__empty">No recommendations.</div>';
          console.timeEnd(`[FP][${SEC}] hydrate`);
          return;
        }

        // Read server-side metadata and log exact source + items
        const srcMeta = doc.getElementById('fp-cards-src-{{ section.id }}');
        const srcType = srcMeta?.dataset?.source; // 'recommendations' | 'fallback'
        const recCount = srcMeta?.dataset?.recommendedCount;
        const serverProducts = summarizeProducts(incoming);

        logSourceHeader(srcType, recCount, serverProducts.length);
        logProductsTable('Server products', serverProducts);

        // Swap into live DOM
        current.innerHTML = incoming.innerHTML;

        // Empty state guard
        if (!current.querySelector('.fp__card')) {
          current.innerHTML = '<div class="fp__empty">No recommendations.</div>';
          console.info(`[FP][${SEC}] No .fp__card elements found → showing empty state.`);
          console.timeEnd(`[FP][${SEC}] hydrate`);
          return;
        }

        // Post-insert breakdown
        logInsertedBreakdown(current);

        // Re-init slider on new content
        (function setup() {
          const nav = document.querySelector('#fp-{{ section.id }} .fp__nav');
          if (nav) nav.hidden = false; // will be toggled inside setupSlider if <= 4
        })();

        setupSlider(current);
        console.timeEnd(`[FP][${SEC}] hydrate`);
      }

      // -------- fetch / prerender paths --------

      if (container && container.dataset.url) {
        console.info(`[FP][${SEC}] Fetching recommendations: ${container.dataset.url}`);
        console.time(`[FP][${SEC}] fetch`);
        fetch(container.dataset.url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } })
          .then((r) => r.text())
          .then((html) => {
            console.timeEnd(`[FP][${SEC}] fetch`);
            hydrateCardsFromHTML(html);
          })
          .catch((err) => {
            console.timeEnd(`[FP][${SEC}] fetch`);
            console.error(`[FP][${SEC}] Fetch failed:`, err);
            const cards = root.querySelector('#fp-cards-{{ section.id }}');
            if (cards && !cards.children.length) {
              cards.innerHTML = '<div class="fp__empty">Couldn’t load recommendations.</div>';
            }
          });
      } else {
        const cards = root.querySelector('#fp-cards-{{ section.id }}');
        console.info(`[FP][${SEC}] No API URL; using pre-rendered/fallback cards.`);
        if (cards) {
          // Log what’s already in DOM (pre-render / fallback case)
          const preProducts = summarizeProducts(cards);
          logSourceHeader('fallback', undefined, preProducts.length); // safe assumption when no API call
          logProductsTable('Pre-rendered products', preProducts);
          logInsertedBreakdown(cards);
          setupSlider(cards);
        }
      }
    })();
  </script>

  {%- comment -%}
    Hidden server-render target for the recommendations request.
    IMPORTANT: We only output the CARD ITEMS here (no wrapper), because
    JS copies innerHTML into the visible .fp__cards container.
  {%- endcomment -%}
  <div style="display:none">
    <div
      id="fp-cards-src-{{ section.id }}"
      data-fp-source="true"
      data-source="{% if recommendations.products_count > 0 %}recommendations{% else %}fallback{% endif %}"
      data-recommended-count="{{ recommendations.products_count | default: 0 }}"
    >
      {% if recommendations.products_count > 0 %}
        {%- for p in recommendations.products -%}
          {%- assign price = p.price_min -%}
          {%- assign compare = p.compare_at_price_max -%}
          {%- if compare > price -%}
            {%- assign pct = compare | minus: price | times: 100.0 | divided_by: compare | round -%}
          {%- endif -%}
          <article class="fp__card" data-origin="recommendation" data-product-id="{{ p.id }}">
            <a class="fp__link" href="{{ p.url }}" aria-label="{{ p.title | escape }}">
              <div class="fp__media">
                {%- assign save = compare | minus: price -%}
                {%- if compare > price and save > 0 -%}
                  <span class="fp__badge fp__badge--save">Save {{ save | money }}</span>
                {%- endif -%}

                {%- if p.featured_image -%}
                  <img
                    class="fp__img"
                    src="{{ p.featured_image | image_url: width: 600, height: 600, crop: 'center' }}"
                    alt="{{ p.featured_image.alt | default: p.title | escape }}"
                    width="600"
                    height="600"
                    loading="lazy"
                  >
                {%- else -%}
                  <div class="fp__img" role="img" aria-label="{{ p.title | escape }}"></div>
                {%- endif -%}
              </div>

              {%- assign rating_val = p.metafields.reviews.rating.value | default: 4.9 -%}
              {%- if rating_val != blank -%}
                <div class="fp__rating" aria-label="Rating {{ rating_val | round: 1 }} out of 5">
                  <span class="fp__stars" aria-hidden="true">★★★★★</span>
                  <span class="fp__rating-val">{{ rating_val | round: 1 }}</span>
                </div>
              {%- endif -%}

              <h3 class="fp__title">{{ p.title | escape }}</h3>

              {%- if p.description != blank -%}
                <p class="fp__desc">{{ p.description | strip_html }}</p>
              {%- endif -%}
            </a>

            <div class="fp__push" aria-hidden="true"></div>

            <div class="fp__price">
              {%- if compare > price -%}
                <span class="fp__price-compare">{{ compare | money }}</span>
              {%- endif -%}
              <span class="fp__price-current">{{ price | money }}</span>
            </div>
          </article>
        {%- endfor -%}
      {% else %}
        {%- assign added = 0 -%}
        {%- for block in section.blocks -%}
          {%- if block.type == 'product' and block.settings.product != blank -%}
            {%- assign sel = block.settings.product -%}
            {%- assign p = sel -%}
            {%- if sel and sel.id == null -%}
              {%- assign p = all_products[sel] -%}
            {%- endif -%}
            {%- comment %} Skip if this is the same product as the current page {%- endcomment %}
            {%- if product and product.id and p and p.id and product.id == p.id -%}{% continue %}{%- endif -%}
            {%- assign price = p.price_min -%}
            {%- assign compare = p.compare_at_price_max -%}
            {%- if compare > price -%}
              {%- assign pct = compare | minus: price | times: 100.0 | divided_by: compare | round -%}
            {%- endif -%}
            <article data-origin="fallback" data-product-id="{{ p.id }}" class="fp__card">
              <a class="fp__link" href="{{ p.url }}" aria-label="{{ p.title | escape }}">
                <div class="fp__media">
                  {%- assign save = compare | minus: price -%}
                  {%- if compare > price and save > 0 -%}
                    <span class="fp__badge fp__badge--save">Save {{ save | money }}</span>
                  {%- endif -%}

                  {%- if p.featured_image -%}
                    <img
                      class="fp__img"
                      src="{{ p.featured_image | image_url: width: 600, height: 600, crop: 'center' }}"
                      alt="{{ p.featured_image.alt | default: p.title | escape }}"
                      width="600"
                      height="600"
                      loading="lazy"
                    >
                  {%- else -%}
                    <div class="fp__img" role="img" aria-label="{{ p.title | escape }}"></div>
                  {%- endif -%}
                </div>

                {%- assign rating_val = p.metafields.reviews.rating.value | default: 4.9 -%}
                {%- if rating_val != blank -%}
                  <div class="fp__rating" aria-label="Rating {{ rating_val | round: 1 }} out of 5">
                    <span class="fp__stars" aria-hidden="true">★★★★★</span>
                    <span class="fp__rating-val">{{ rating_val | round: 1 }}</span>
                  </div>
                {%- endif -%}

                <h3 class="fp__title">{{ p.title | escape }}</h3>

                {% assign desc = p.description | strip_html | default: 'Product Description' | truncate: 100 %}
                <p class="fp__desc">{{ desc }}</p>
              </a>

              <div class="fp__push" aria-hidden="true"></div>

              <div class="fp__price">
                {%- if compare > price -%}
                  <span class="fp__price-compare">{{ compare | money }}</span>
                {%- endif -%}
                <span class="fp__price-current">{{ price | money }}</span>
              </div>
            </article>
            {%- assign added = added | plus: 1 -%}
            {%- if added >= limit -%}{% break %}{%- endif -%}
          {%- endif -%}
        {%- endfor -%}
        {%- if added == 0 -%}
          <div class="fp__empty">No products to show.</div>
        {%- endif -%}
      {% endif %}
    </div>
  </div>
</section>

{% schema %}
{
  "name": "TS Featured products",
  "tag": "section",
  "class": "fp-section",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "Featured products" },
    {
      "type": "textarea",
      "id": "subheading",
      "label": "Description",
      "default": "This is the featured products section"
    },
    { "type": "range", "id": "limit", "label": "Max products to show", "min": 2, "max": 12, "step": 1, "default": 8 }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Fallback product",
      "limit": 12,
      "settings": [{ "type": "product", "id": "product", "label": "Product" }]
    }
  ],
  "presets": [{ "name": "TS Featured products" }]
}
{% endschema %}
